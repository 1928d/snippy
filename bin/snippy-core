#!/usr/bin/env perl
use warnings;
use strict;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
###LINE_FOR_BREW_CONDA###
use Snippy::Version;
use Bio::SeqIO;
use List::Util qw(sum max any uniq min);
use File::Temp;
use Fatal;
use File::Basename;
use Data::Dumper;
use IO::File;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Globals

my $VERSION = Snippy::Version->version;
my $EXE = $FindBin::RealScript;
my $URL = "http://github.com/tseemann/snippy";
my @CMDLINE = (basename($EXE), @ARGV);

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Options

my(@Options, $debug, $noref, $aformat,
             $in_prefix, $out_prefix, $fasta, $bed,
             $gap_char, $mask_char);
setOptions();

$fasta or err("Please provide --ref FASTA");
-r $fasta or err("Can't open --ref $fasta");

err("Can't read --bed $bed") if $bed and $bed ne 'auto' and !-r $bed;

length($gap_char)==1 or err("--gap-char must be a single character");
#length($pad_char)==1 or err("--pad-char must be a single character");
length($mask_char)==1 or err("--mask-char must be a single character");

$in_prefix or err("Please provide --in-prefix");
$out_prefix or err("Please provide --out-prefix");

$noref and wrn("$EXE $VERSION does not support the --noref option; ignoring.");
$aformat and wrn("$EXE $VERSION does not support the --aformat option; using 'fasta'");

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Main

my($chrom,$chrom_list) = load_fasta_hash($fasta);
my $total_bp = sum( map { length $chrom->{$_} } @$chrom_list );
msg("Loaded", scalar(@$chrom_list), "sequences totalling $total_bp bp.");

my %var;
my %seq = ('Reference' => $chrom);

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Preload BED masking file

my %mask;
my @mask;
my $masked_bp = 0;
if ($bed) {
  # create a self bed
  if ($bed eq 'auto') {
    msg("--bed auto mode: self-aligning --ref $fasta to identify repeats");
    open my $PAF, '-|', "minimap2 -c -x asm5 -X '$fasta' '$fasta' | sort -k1,1 -k3,3n";
    # https://github.com/lh3/miniasm/blob/master/PAF.md  # dv:f:0.0008
    my %paf;
    while (<$PAF>) {
      my @paf = split m/\t/;
      $paf{ tsv($paf[0], $paf[2]+1, $paf[3]) }++;  # REF src
      $paf{ tsv($paf[5], $paf[7]+1, $paf[8]) }++;  # REF dest
    }
    close $PAF;
    $bed = "$out_prefix.self_mask.bed"; # filename to reload next
    my $SBED = create_file($bed);
    for my $line (sort keys %paf) {
      print $SBED $line;
    }
    $SBED->close;
  }
  # load the bed
  msg("Loading mask bed file: $bed");
  # CHROM \t BEGIN(inclusive) \t END(exclusive)  # 0-based
  open my $BED, '<', $bed;
  while (<$BED>) {
    chomp;
    my @bed = split m/\t/;
    next unless @bed >= 3;
    $bed[1]++;  # put into regular coordinates
    push @mask, [ @bed ];
    for my $pos ($bed[1] .. $bed[2]) {
      $mask{$bed[0]}{$pos}++;
      $masked_bp++;
    }
  }
  close $BED;
}
msg("Will mask $masked_bp positions ~ ".sprintf("%.2f%%", $masked_bp*100/$total_bp) );

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Load and decompose variants from each VCF

my @id;

for my $dir (@ARGV) {
  my $vcf = "$dir/$in_prefix.vcf";
  -r $vcf or err("Could not read VCF '$vcf'");
  my $afa = "$dir/$in_prefix.aligned.fa";
  -r $afa or err("Could not read AFA '$afa'");
  my $id = $dir;
  push @id, $id;
  
  msg("$id: loading snippy alignment from $afa") if $debug;
  ($seq{$id}) = load_fasta_hash($afa);  # load snippy alignment
  my $unal = sum( map { $seq{$id}{$_} =~ tr/-/-/ } @$chrom_list );
  my($ndel,$nins,$nsnp) = (0,0,0);
  
  msg("$id: reading variants from $vcf") if $debug;
  open VCF, '<', $vcf;
  my $nvar = 0;
  while (<VCF>) {
    next if m/^#/;
    chomp;
    #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE1 ...
    my($chr,$pos,undef,$ref,$alt,$qual,$filter,$info,$format,$sample) = split m/\t/;
    my @ref = split m//, $ref;
    my @alt = split m//, $alt;
    my $L = max($#ref, $#alt);
    for my $i (0 .. $L) {  # this is L not L-1 because we used $#array
      my $r = shift(@ref) || $gap_char;
      my $a = shift(@alt) || $gap_char;
      if ($r ne $a) {
        if ($r ne $gap_char) {
          $var{$chr}{$pos+$i}{$id} = $a;  # ALT is [ATGC-]
          $a eq '-' ? $ndel++ : $nsnp++;
        }
        else {
          $nins++;
        }
      }
    }
  }
  my $gaps = sum( map { $seq{$id}{$_} =~ tr/-/-/ } @$chrom_list );
  msg("Sample\t$id\tsnp=$nsnp\tdel=$ndel\tins=$nins\tunaligned=$gaps");
}

@id = sort @id;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Write VCF, TAB and generate FULL.ALN

my $tab_hdr = tsv(qw(CHR POS REF), @id);
my $TAB = create_file("$out_prefix.tab");
print $TAB $tab_hdr;
#my $FULLTAB = create_file("$out_prefix.full.tab");
#print $TAB $tab_hdr;

my $VCF = create_file("$out_prefix.vcf");
print $VCF <<"EOB";
##fileformat=VCFv4.2
##commandLine="@CMDLINE"
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##INFO=<ID=TYPE,Number=A,Type=String,Description="Allele type: snp ins del">
EOB
for my $chr (@$chrom_list) {
  printf $VCF "##contig=<ID=$chr,len=%d>\n", length($chrom->{$chr});
}
print $VCF tsv('#CHROM', qw(POS ID REF ALT QUAL FILTER INFO FORMAT), @id);

for my $chr (@$chrom_list) {
  msg("Processing contig: $chr");
  POS:
  for my $pos ( sort { $a <=> $b } keys %{$var{$chr}} ) 
  {
    next if $mask{$chr}{$pos}; # BAIL OUT IF THIS SITE IS MASKED
  
    my $r = substr($chrom->{$chr}, $pos-1, 1);
    my @vcf = ( $chr, $pos, '.', $r );
    my @tab = ( $chr, $pos, $r );
    my %ALT;

    for my $id (keys %{$var{$chr}{$pos}}) {
      my $alt = $var{$chr}{$pos}{$id};
      # patch in ALT
      substr($seq{$id}{$chr}, $pos-1, 1) = lc($alt);
      # if insertion, don't do VCF
      next POS if $alt eq $gap_char; # SKIP VCF IF TYPE=ins
      $ALT{$id} = $alt;
    }
    my @GT = sort { $a cmp $b } uniq values %ALT;
    my %GT_of = map { ($GT[$_-1] => $_) } (1 .. @GT);
    $GT_of{$r} = 0;
#    print Dumper($r, \%ALT, \@GT, \%GT_of);

    push @vcf, join(",", @GT), '.', 'PASS', 'TYPE=snp', 'GT';
    push @vcf, map { $GT_of{$ALT{$_} || $r} || '0' } @id;
    print $VCF tsv(@vcf);

    push @tab, map { $ALT{$_} || $r } @id;
    print $TAB tsv(@tab);
  }
} 

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Mask FULL.ALN
push @id, 'Reference';
if (@mask) {
  msg("Masking alignment at", 0+@mask, "regions");
  for my $region (@mask) {
    my($chr, $begin, $end) = @$region;
    my $len = $end-$begin+1;
    my $patch = ${mask_char}x$len;
    substr( $seq{$_}{$chr}, $begin-1, $len, $patch ) for (@id);
  }
}

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# PREFIX.full.aln
# We have to form a single alignment so concatenate sequences
my $full_aln = "$out_prefix.full.aln";
msg("Generating $full_aln");
my %out;
for my $id ('Reference', @id) {
  $out{$id} = join '', map { $seq{$id}{$_} } @$chrom_list;
}
save_fasta_hash($full_aln, \%out);

my $core_aln = "$out_prefix.aln";
my $cmd = "snp-sites -c -o $core_aln $full_aln";
msg("Running: $cmd");
system($cmd)==0 or err("Could not run: $cmd"); 

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# PREFIX.txt file
my @stats = ([ qw(ID LENGTH ALIGNED UNALIGNED VARIANT MASKED LOWCOV) ]);
for my $id (@id) {
 push @stats, [
   $id,
   length($out{$id}),
   $out{$id} =~ tr/[AGCTagct]/[AGCTagct]/,
   $out{$id} =~ tr/-/-/,
   $out{$id} =~ tr/[agct]/[agct]/,
   $out{$id} =~ tr/X/X/,
   $out{$id} =~ tr/N/N/,
 ];
}
matrix_to_tsv("$out_prefix.txt", \@stats);

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Goodbye
my @motd = (
  "This analysis is totally hard-core!",
  "Run 'snp-sites -b -c -o phylo.aln core.full.aln' for IQTree, BEAST, RaxML",
  "You can mask columns using '--mask BEDFILE --mask-char X'",
  "The Snippy manual is at $URL/blob/master/README.md",
  "Found a bug? Post it at $URL/issues",
  "Have a suggestion? Tell me at $URL/issues",
);
srand($$);
msg( $motd[ int(rand(scalar(@motd))) ] );
msg("Done.");

#----------------------------------------------------------------------
sub matrix_to_tsv {
  my($fname, $matrix) = @_;
  msg("Creating TSV file: $fname");
  open my $TSV, '>', $fname;
  for my $row (@$matrix) {
    print $TSV tsv(@$row);
  }
  close $TSV;
}

#----------------------------------------------------------------------
sub create_file {
  my($fname) = @_;
  msg("Opening: $fname");
  return IO::File->new(">$fname"); # or err("Can't open: $fname");
}

#----------------------------------------------------------------------
sub tsv {
  return join("\t", @_)."\n";
}

#----------------------------------------------------------------------
sub show_version {
  print "$EXE $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
sub load_fasta_hash {
  my($fname) = @_;
  msg("Loading FASTA: $fname") if $debug;
  my $hash;
  my $ids;
  my $in = Bio::SeqIO->new(-file=>$fname, -format=>"fasta", -alphabet=>'dna');
  while (my $seq = $in->next_seq) {
    $hash->{ $seq->id } = uc( $seq->seq );
    push @$ids, $seq->id;
  }
  return ($hash, $ids);
}

#----------------------------------------------------------------------
sub save_fasta_hash {
  my($fname, $hash, $order) = @_;
  msg("Saving FASTA: $fname") if $debug;
  my $out = Bio::SeqIO->new(-file=>">$fname", -format=>"fasta", -alphabet=>'dna');
  $order = [ sort keys %$hash ] unless $order;
  for my $id (@$order) {
    $out->write_seq(
      Bio::Seq->new(-id=>$id, -seq=>$hash->{$id}, -alphabet=>'dna')
    );
  }
  return $hash;
}

#----------------------------------------------------------------------
sub msg { print STDERR "@_\n";}
sub wrn { msg("NOTICE:", @_); }
sub err { msg("ERROR:", @_); exit(2); }

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help!",       VAR=>\&usage,                        DESC=>"This help"},
    {OPT=>"version!",    VAR=>\&show_version,                 DESC=>"Print version and exit"},
    {OPT=>"debug!",      VAR=>\$debug,      DEFAULT=>0,       DESC=>"Output verbose debug info"},
    {OPT=>"ref=s",       VAR=>\$fasta,      DEFAULT=>'',      DESC=>"FASTA reference"},
    {OPT=>"prefix=s",    VAR=>\$out_prefix, DEFAULT=>'core',  DESC=>"Output prefix"},
    {OPT=>"mask=s",      VAR=>\$bed,        DEFAULT=>'',      DESC=>"BED file of sites to mask"},
    {OPT=>"gap-char=s",  VAR=>\$gap_char,   DEFAULT=>'-',     DESC=>"Gap/deletion character"},
    {OPT=>"mask-char=s", VAR=>\$mask_char,  DEFAULT=>'X',     DESC=>"Masking character"},
    {OPT=>"inprefix=s",  VAR=>\$in_prefix,  DEFAULT=>'snps',  DESC=>"Prefix of Snippy output files"},
    {OPT=>"noref!",      VAR=>\$noref,      DEFAULT=>0,       DESC=>"Legacy option kept for backward compat."},
    {OPT=>"aformat=s",   VAR=>\$aformat,    DEFAULT=>'',      DESC=>"Legacy option kept for backward compat."},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  select STDERR;
  print "SYNOPSIS\n  Build whole+core genome aligment from Snippy folders\n";
  print "USAGE\n";
  print "  $EXE [options] --ref ref.fa snippy1 snippy2 snippy3 ...\n";
  print "OPTIONS\n";
  foreach (@Options) {
    next if $_->{DESC} =~ m/^Legacy/;
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
