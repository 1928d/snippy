#!/usr/bin/env perl
use warnings;
use strict;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
###LINE_FOR_BREW_CONDA###
use Snippy::Version;
use Bio::SeqIO;
use List::Util qw(sum max any);
use File::Temp;
use Fatal;
use File::Basename;
use Data::Dumper;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Globals

my $VERSION = Snippy::Version->version;
my $EXE = $FindBin::RealScript;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Options

my(@Options, $debug, $cpus,
             $in_prefix, $out_prefix, $fasta, $bed, $pad_ref,
             $gap_char, $mask_char, $pad_char);
setOptions();

$fasta or err("Please provide --ref FASTA");
-r $fasta or err("Can't open --ref $fasta");

err("Can't read --bed $bed") if $bed and !-r $bed;

length($gap_char)==1 or err("--gap-char must be a single character");
length($pad_char)==1 or err("--pad-char must be a single character");
length($mask_char)==1 or err("--mask-char must be a single character");

$in_prefix or err("Please provide --in-prefix");
$out_prefix or err("Please provide --out-prefix");

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Main

msg("Loading reference genome: $fasta");
my($chrom,$chrom_list) = load_fasta_hash($fasta);
my $total_bp = sum( map { length $chrom->{$_} } @$chrom_list );
msg("Loaded", scalar(@$chrom_list), "sequences totalling $total_bp bp.");

msg("REF: populating");
my %aln;
populate_hash(\%aln, 'REF', $chrom);

my %mask;
my $masked_bp = 0;
if ($bed) {
  msg("Loading mask bed file: $bed");
  # CHROM \t BEGIN(inclusive) \t END(exclusive)  # 0-based
  open my $BED, '<', $bed;
  while (<$BED>) {
    chomp;
    my @bed = split m/\t/;
    for my $pos ($bed[1]+1 .. $bed[2]) {
      $mask{$bed[0]}{$pos}++;
      $masked_bp++;
    }
  }
  close $BED;
}
msg("Masking $masked_bp positions ~ ".sprintf("%.2f%%", $masked_bp*100/$total_bp) );

my %pad; 

my $nvcf = 0;
my @id = ('REF');

for my $dir (@ARGV) {
  my $vcf = "$dir/$in_prefix.vcf";
  -r $vcf or err("Could not read VCF '$vcf'");
  my $afa = "$dir/$in_prefix.aligned.fa";
  -r $afa or err("Could not read AFA '$afa'");
  my $id = $dir;
  push @id, $id;

  msg("$id: populating alignment structure from $afa");
  my($afa_seq) = load_fasta_hash($afa);
  populate_hash(\%aln, $id, $afa_seq);

  msg("$id: patching variants from $vcf");
  open VCF, '<', $vcf;
  $nvcf++;
  my $nvar = 0;
  while (<VCF>) {
    chomp;
    if (m/^#/) {
      if (m/^#CHROM/) {
        # $id = (split m/\t/)[9];
      }
    }
    else {
      # [VCF] CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE1 ...
      my($chr,$pos,undef,$ref,$alt,$qual,$filter,$info,$format,$sample) = split m/\t/;
#      ($pos,$ref,$alt) = minimal_rep($pos,$ref,$alt);
#      my $refL = length($ref);
#      my $altL = length($alt);
#      my $indel = $refL == $altL  ? 'SNP' : 'INDEL';
      my @ref = split m//, $ref;
      my @alt = split m//, $alt;
      my $L = max($#ref, $#alt);
      for my $i (0 .. $L) {
        my $r = shift(@ref) || $pad_char;
        my $a = shift(@alt) || $gap_char;
        if ($r ne $a) {
#          $aln{$chr}[$pos+$i]{$id} = "$r,$a (via $pos:$ref=>$alt)";
          # ignore insertions (for now)
          if ($r ne $pad_char) {
            $aln{$chr}[$pos+$i]{$id} = lc $a;
            #^^^
          }
          elsif ($pad_ref) {
            $pad{$chr}{$pos}{REF} = $r;
            $pad{$chr}{$pos}{$id} = lc $a;
            #^^^ 
          }
        }
        $nvar++;
      }
    }
  }
  msg("$id: found $nvar variant base locations");
}

if ($pad_ref) {
  my $num_pads = sum( map { scalar keys %{$pad{$_}} } @$chrom_list );
  msg("Found $num_pads pads for insertions");
}

#msg("Dumping pad data structure..."); print Dumper(\%pad);

my %out;

for my $seqid (@$chrom_list) {
  my $L = scalar @{$aln{$seqid}} - 1;  # skip 0 pos
  msg("Generating output for $seqid $L bp");
  for my $pos (1 .. $L) {
    msg("Up to $seqid:$pos") if $pos % 1_000_000 == 0;
    if ($bed and $mask{$seqid}{$pos}) {
      $out{$_} .= $mask_char for (@id);
    }
    else {
      if ($pad_ref and $pad{$seqid}{$pos}{REF}) {
        $out{$_} .= ($pad{$seqid}{$pos}{$_} || $pad_char) for (@id);
      }
      $out{$_} .= $aln{$seqid}[$pos]{$_} for (@id);
    }
  }
} 

my $outname = "$out_prefix.full.aln";
msg("Saving $outname");
save_fasta_hash($outname, \%out);

msg("Done.");

#my $cmd = "parallel -j $cpus -k -a ".$cmdfile->filename;
#print STDERR "Running: $cmd\n";
#system($cmd)==0 or die "Could not run: $cmd";

#----------------------------------------------------------------------
sub show_version {
  print "$EXE $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
sub populate_hash {
  my($aln, $label, $seq) = @_;
  for my $id (keys %$seq) {
    my @dna = split m//, uc($seq->{$id});
    for my $pos (1 .. @dna) {
      $aln{$id}[$pos]{$label} = $dna[$pos-1];
#      $aln{$id}[$pos]{_POS} = $pos if $label eq 'REF';
    }
  }
}

#----------------------------------------------------------------------
sub minimal_rep {
 my($pos, $ref, $alt) = @_;
 my @ref = split m//, $ref;
 my @alt = split m//, $alt;
 while (@ref > 1 and @alt > 1 and $ref[-1] eq $alt[-1]) {
   pop @ref;
   pop @alt;
   print STDERR "  RIGHT : ref=[@ref] alt=[@alt] pos=$pos\n" if $debug;
 }
 while (@ref > 1 and @alt > 1 and $ref[0] eq $alt[0]) {
   shift @ref;
   shift @alt;
   $pos++;
   print STDERR "   LEFT : ref=[@ref] alt=[@alt] pos=$pos\n" if $debug;
 }
 return ( $pos, join('', @ref), join('', @alt) );
}

#----------------------------------------------------------------------
sub load_fasta_hash {
  my($fname) = @_;
  my $hash;
  my $ids;
  my $in = Bio::SeqIO->new(-file=>$fname, -format=>"fasta");
  while (my $seq = $in->next_seq) {
    $hash->{ $seq->id } = uc( $seq->seq );
    push @$ids, $seq->id;
  }
  return ($hash, $ids);
}

#----------------------------------------------------------------------
sub save_fasta_hash {
  my($fname, $hash) = @_;
  my $out = Bio::SeqIO->new(-file=>">$fname", -format=>"fasta");
  for my $id (keys %$hash) {
    $out->write_seq(
      Bio::Seq->new(-id=>$id, -seq=>$hash->{$id}, -alphabet=>'dna')
    );
  }
  return $hash;
}

#----------------------------------------------------------------------
sub msg {
  print STDERR "@_\n";
}

#----------------------------------------------------------------------
sub err {
  msg(@_);
  exit(2);
}              

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help!",     VAR=>\&usage,                DESC=>"This help"},
    {OPT=>"version!",  VAR=>\&show_version,         DESC=>"Print version and exit"},
    {OPT=>"debug!",    VAR=>\$debug,   DEFAULT=>0,  DESC=>"Output verbose debug info"},
#    {OPT=>"cpus=i",    VAR=>\$cpus,    DEFAULT=>1,  DESC=>"Number of threads to use"},
    {OPT=>"in-prefix=s",  VAR=>\$in_prefix,  DEFAULT=>'snps',  DESC=>"Prefix of Snippy output files"},
    {OPT=>"out-prefix=s", VAR=>\$out_prefix, DEFAULT=>'core',  DESC=>"Output prefix"},
    {OPT=>"bed=s",       VAR=>\$bed,        DEFAULT=>'', DESC=>"BED file of sites to mask"},
    {OPT=>"ref=s",       VAR=>\$fasta,      DEFAULT=>'', DESC=>"FASTA reference"},
    {OPT=>"pad-ref!",    VAR=>\$pad_ref,    DEFAULT=>0, DESC=>"Pad reference for sample insertions"},
    {OPT=>"gap-char=s",  VAR=>\$gap_char,   DEFAULT=>'-', DESC=>"Gap character"},
    {OPT=>"mask-char=s", VAR=>\$mask_char,  DEFAULT=>'X', DESC=>"Masked character"},
    {OPT=>"pad-char=s",  VAR=>\$pad_char,   DEFAULT=>'*', DESC=>"Pad character"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  select STDERR;
  print "SYNOPSIS\n  Build whole+core genome aligment from Snippy folders\n";
  print "USAGE\n";
  print "  $EXE [options] --ref ref.fa snippy1 snippy2 snippy3 ... # produces core.*\n";
  print "OPTIONS\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
