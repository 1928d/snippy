#!/usr/bin/env perl
use warnings;
use strict;
use Time::Piece;
use List::Util qw(any);
use File::Spec;
use Bio::AlignIO;
use Bio::LocatableSeq;
use Data::Dumper;
use Bio::Align::DNAStatistics;
use Bio::Tree::DistanceFactory;
use Bio::TreeIO;
use Bio::Tree::Draw::Cladogram;
use Bio::SeqIO;

my $REF = 'Reference';

my(@Options, $quiet, $verbose, $inprefix, $noref, $mincov, $prefix, $aformat, $trees, $tformat);
setOptions();

my $anno;
my $snp;
my %dir_of;
my %refseq;
my %gapseq;
my $reflen;

for my $dir (@ARGV) {
  my $id = dir_to_id($dir);
  exists $dir_of{$id} and err("ID '$id' already exists.");
  msg("Using ID '$id' for $dir");
  $dir_of{$id} = $dir;
  add_snippy($id, $dir, $noref);
  # load the reference genome for first time through loop
  if (not keys %refseq) {
    my $in = Bio::SeqIO->new(-file=>"$dir/reference/ref.fa", -format=>'fasta');
    while (my $s = $in->next_seq) {
      $refseq{ $s->id } = $s->seq;
      $gapseq{ $s->id } = '-'x($s->length);
      $reflen += $s->length;
    }
  }
}

my @id = sort keys %dir_of;
my $N = scalar(@id);
msg("Loaded $N SNP tables.");

unless ($noref) {
  msg("Including '$REF' in results.");
  unshift @id, $REF;
  $N++;
}

my $txt_fn = "$prefix.txt";
msg("Will write alignment statistics to $txt_fn");
open my $txt_fh, '>', $txt_fn;
print $txt_fh tsv('ID', 'Aligned Bases', 'Reference bases', '% Aligned Bases');

msg("Patching covered bases into whole genome alignment...");
my %aln;
for my $id (@id) {
  if ($id eq $REF) {
    $aln{$REF} = { %refseq };
    next;
  }
  my %tmp = (%gapseq); # blank gap template
  my $count=0;
  my $depth_fn = "$dir_of{$id}/$inprefix.depth.gz"; # samtools depth output
  -r $depth_fn or err("Can not open: $depth_fn");
  open my $depth_fh, '-|', "bgzip -c -d \Q$depth_fn\E";
  while (<$depth_fh>) {
    my($seqid, $pos, $cov) = split m/\t/;
    my $new = $cov < $mincov ? 'N' : substr($refseq{$seqid}, $pos-1, 1);
    substr $tmp{$seqid}, $pos-1, 1, $new; # patch AGTC/N into gap template
#    $count++ if $new ne 'N';
    if ($new ne 'N') {
      $count++;
      $snp->{$seqid}{$pos}{$id} ||= $new;
    } 
  }
  $aln{$id} = { %tmp };
  my $pc = sprintf "%.2f", $count*100/$reflen;
  msg("$id coverage $count/$reflen = $pc%");
  print $txt_fh tsv($id, $count, $reflen, $pc);
}

msg("Patching variant sites into whole genome alignment...");
for my $seq (keys %$snp) {
  for my $pos (keys %{$snp->{$seq}}) {
    my $var = $snp->{$seq}{$pos};
    for my $id (keys %$var) {
      substr $aln{$id}{$seq}, $pos-1, 1, $var->{$id};
    }
  }
}

save_hash_alignment(\%aln, "$prefix.full.aln", $aformat);

#print Dumper($snp);
my $table_fn = "$prefix.tab";
open TABLE, '>', $table_fn;
print TABLE tsv('CHR','POS',@id,'LOCUS_TAG','GENE','PRODUCT');

msg("Writing core SNP table");
my $nsites = 0;
my $ncore = 0;
my %valn;
for my $seq (sort keys %$snp) {
  for my $pos (sort { $a <=> $b } keys %{$snp->{$seq}}) {
    my $var = $snp->{$seq}{$pos};
    $nsites++;
    next unless $N == scalar(keys %$var);     # core?
    my @var = map { $var->{$_} } @id;
    next if not (any { $_ ne $var[0] } @var); # monomorphic?
    msg("$seq:$pos @var") if $verbose;
    map { $valn{$_} .= $var->{$_} } @id;       # append
    print TABLE tsv($seq, $pos, @var, @{$anno->{$seq}{$pos}});
    $ncore++;
  }
}
msg("Found $ncore core SNPs from $nsites SNPs.");
msg("Saved SNP table: $table_fn");

my $core_aln = save_hash_alignment(\%valn, "$prefix.aln", $aformat);

if ($trees) {
  msg("Constructing NJ tree from core variant sites.");
  my $stats = Bio::Align::DNAStatistics->new();
  my $matrix = $stats->distance(-method=>'Kimura', -align=>$core_aln);
  my $dfactory = Bio::Tree::DistanceFactory->new(-method=>'NJ');
  my $tree = $dfactory->make_tree($matrix);

  my $tree_fn = "$prefix.tree";
  msg("Saving Newick tree: $tree_fn");                   
  my $treeout = Bio::TreeIO->new(-file=>">$tree_fn", -format=>$tformat);
  $treeout->write_tree($tree);

  my $cladogram_fn = "$prefix.tree.eps";
  msg("Saving cladogram: $cladogram_fn");
  my $cladogram = Bio::Tree::Draw::Cladogram->new(-tree=>$tree);
  $cladogram->print(-file => $cladogram_fn);

  my $svg_fn = "$prefix.tree.svg";
  msg("Saving SVG tree: $svg_fn");
  my $svg_out = Bio::TreeIO->new(-file=>">$svg_fn", -format=>'svggraph');
  $svg_out->write_tree($tree);
}

msg("Done.");

#----------------------------------------------------------------------

sub save_hash_alignment {
  my($aln, $outfile, $format) = @_;
  msg("Constructing alignment object for $outfile");
  my $aln_obj = Bio::SimpleAlign->new(-id=>$outfile);
  for my $id (sort keys %{$aln}) {
    my $dna = ref($aln->{$id}) eq 'HASH'
            ? join( '', map { $aln->{$id}{$_} } (sort keys %{$aln->{$id}}) )
            : $aln->{$id};
    $aln_obj->add_seq(
      Bio::LocatableSeq->new(
        -id    => $id,
        -seq   => $dna,
        -start => 1,
      )
    );
  }
  $aln_obj->set_displayname_flat(); # remove "/start-end" suffix
  msg("Writing '$format' alignment to $outfile");
  my $out = Bio::AlignIO->new(-file=>">$outfile", -format=>$format);
  $out->write_aln($aln_obj);
  return $aln_obj;
}

#----------------------------------------------------------------------

sub tsv {
  return join("\t", map { defined($_) ? $_ : '.' } @_)."\n";
}

#----------------------------------------------------------------------

sub dir_to_id {
  my($dir) = @_;
  my @dir = File::Spec->splitpath($dir);
  return $dir[-1];  
}

#----------------------------------------------------------------------

sub add_snippy {
  my($id, $dir, $noref) = @_;
  msg("Checking Snippy folder: $dir");
  -d $dir or err("Not a folder: $dir");
  my $snp_file = "$dir/$inprefix.tab";
  -r $snp_file or err("Could not find '$snp_file'. Not a Snippy folder or wrong --inprefix ?");
  msg("Detected variant file: $snp_file");
  open SNPS, '<', $snp_file;
  my $header = <SNPS>;
  $header =~ m/^CHROM/ or err("Unexpected header in $snp_file: $header");
  my $num=0;
  my $len=0;
  while (<SNPS>) {
    chomp;
    my($seq,$pos,$type,$ref,$alt,
       undef,undef,undef,undef,undef,
       $ltag, $gene, $prod) = split m/\t/;
    # 0:SEQ 1:POS 2:TYPE 3:REF 4:ALT 
    # 5:EVID 6:FTYPE 7:STRAND 8:NT 9:AA 
    # 10:LOCUS 11:GENE 12:PRODUCT
    next unless $type eq 'snp' or $type eq 'mnp'; # no complex,ins,del
    next unless length($ref) eq length($alt);     # double check REF / ALT
    for my $offset (0 .. length($alt) - 1) {      # handle MNP (>1 pos)
      $snp->{$seq}{$pos+$offset}{$id}  = substr($alt,$offset,1);
      $snp->{$seq}{$pos+$offset}{$REF} = substr($ref,$offset,1) unless $noref;
      $len++;
    }
    $anno->{$seq}{$pos} = [ $ltag, $gene, $prod ]; # save annotation for TABLE
    $num++;
  }
  close SNPS;
  msg("$id: found $num variants totalling $len bp in $snp_file");
}

#----------------------------------------------------------------------
 
sub msg {
  return if $quiet;
  my $t = localtime;
  my $line = "[".$t->hms."] @_\n";
  print STDERR $line;
}
         
#----------------------------------------------------------------------
 
sub err {
  msg(@_);
  exit(-1);
}
       
#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help!",      VAR=>\&usage,                  DESC=>"This help"},
    {OPT=>"quiet!",     VAR=>\$quiet,     DEFAULT=>0 , DESC=>"No output to stderr"},
    {OPT=>"verbose!",   VAR=>\$verbose,   DEFAULT=>0 , DESC=>"Verbose output"},
    {OPT=>"inprefix=s", VAR=>\$inprefix,  DEFAULT=>'snps' , DESC=>"Input prefix of Snippy files"},
    {OPT=>"prefix=s",   VAR=>\$prefix,    DEFAULT=>'core' , DESC=>"Output file prefix"},
    {OPT=>"noref!",     VAR=>\$noref,     DEFAULT=>0 , DESC=>"Exclude reference"},
    {OPT=>"mincov=i",   VAR=>\$mincov,    DEFAULT=>10 , DESC=>"Minimum depth of coverage to consider core"},
    {OPT=>"aformat=s",  VAR=>\$aformat,   DEFAULT=>'fasta' , DESC=>"Output alignment format: nexus fasta phylip maf clustalw ..."},
    {OPT=>"trees!",     VAR=>\$trees,     DEFAULT=>0 , DESC=>"Produce Kimura-NJ tree + SVG and EPS"},
    {OPT=>"tformat=s",  VAR=>\$tformat,   DEFAULT=>'newick' , DESC=>"Output tree format: newick nexus cluster nexml ..."},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print STDERR "Synopsis:\n  Combine multiple Snippy folders into a core SNP alignment\n";
  print STDERR "Usage:\n";
  print STDERR "  $0 [options] [--noref] snippyDir1/ snippyDir2/ snippyDir3/ ...\n";
  print STDERR "Options:\n";
  foreach (@Options) {
    printf STDERR "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
                  defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
